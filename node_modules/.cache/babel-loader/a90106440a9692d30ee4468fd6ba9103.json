{"ast":null,"code":"var _jsxFileName = \"/Users/luulnegasi/Desktop/useEffect-useReducer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\n/**\n * /// useEffect Hook\n * useEffect is a React hook for side effects.\n * Side effects or effects are the operations that can affect other components and can’t be done during rendering\n *\n * ---We perform a side effect when we need to reach outside of our React components to do something.\n *  Performing a side effect, however, will not give us a predictable result.\n\n   --Think about if we were to request data (like blog posts) from a server that has failed and instead of our post data, \n   gives us a 500 status code response. \n *\n   -Common side effects include:\n    -Making a request to an API for data from a backend server \n    -To interact with browser APIs (that is, to use document or window directly)\n    -Using unpredictable timing functions like setTimeout or setInterval\n\n\n    --useEffect  have two arguments  a callBack function and the secound one is  an array dependency \n    \n    the procedure of rendering is   first asyncrnos code is rendered , then the UI is rendered , after that  the use effect  function rendered\n\n    Note: if the dependency is empty that means the function runs only once when the program starts\n    but  if we put a dependency it renders when the dependency is changed or updated\n\n    Note:If you do not provide the dependencies array at all and only provide a function to useEffect, it will run after every render.then it cause an infinte loop\n\n\n * @returns\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const userLoggedValue = localStorage.getItem(\"isLoggedIn\"); //1\n\n  useEffect(() => {\n    if (userLoggedValue === \"1\") setIsLoggedIn(true);\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","App","isLoggedIn","setIsLoggedIn","userLoggedValue","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler"],"sources":["/Users/luulnegasi/Desktop/useEffect-useReducer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\n\n/**\n * /// useEffect Hook\n * useEffect is a React hook for side effects.\n * Side effects or effects are the operations that can affect other components and can’t be done during rendering\n *\n * ---We perform a side effect when we need to reach outside of our React components to do something.\n *  Performing a side effect, however, will not give us a predictable result.\n\n   --Think about if we were to request data (like blog posts) from a server that has failed and instead of our post data, \n   gives us a 500 status code response. \n *\n   -Common side effects include:\n    -Making a request to an API for data from a backend server \n    -To interact with browser APIs (that is, to use document or window directly)\n    -Using unpredictable timing functions like setTimeout or setInterval\n\n\n    --useEffect  have two arguments  a callBack function and the secound one is  an array dependency \n    \n    the procedure of rendering is   first asyncrnos code is rendered , then the UI is rendered , after that  the use effect  function rendered\n\n    Note: if the dependency is empty that means the function runs only once when the program starts\n    but  if we put a dependency it renders when the dependency is changed or updated\n\n    Note:If you do not provide the dependencies array at all and only provide a function to useEffect, it will run after every render.then it cause an infinte loop\n\n\n * @returns\n */\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const userLoggedValue = localStorage.getItem(\"isLoggedIn\"); //1\n  useEffect(() => {\n    if (userLoggedValue === \"1\") setIsLoggedIn(true);\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <React.Fragment>\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAMQ,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAxB,CAFa,CAE+C;;EAC5DT,SAAS,CAAC,MAAM;IACd,IAAIO,eAAe,KAAK,GAAxB,EAA6BD,aAAa,CAAC,IAAD,CAAb;EAC9B,CAFQ,EAEN,EAFM,CAAT;;EAGA,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;IACxC;IACA;IACAJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACAP,aAAa,CAAC,IAAD,CAAb;EACD,CALD;;EAOA,MAAMQ,aAAa,GAAG,MAAM;IAC1BR,aAAa,CAAC,KAAD,CAAb;EACD,CAFD;;EAIA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAA,wBACE,QAAC,UAAD;MAAY,eAAe,EAAED,UAA7B;MAAyC,QAAQ,EAAES;IAAnD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,WACG,CAACT,UAAD,iBAAe,QAAC,KAAD;QAAO,OAAO,EAAEK;MAAhB;QAAA;QAAA;QAAA;MAAA,QADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;QAAM,QAAQ,EAAES;MAAhB;QAAA;QAAA;QAAA;MAAA,QAFjB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GA1BQV,G;;KAAAA,G;AA4BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}